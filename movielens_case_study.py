# -*- coding: utf-8 -*-
"""Movielens_Case Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b2WyFw21NMBy_mN7i9WStIoBJe__zko1
"""

# Commented out IPython magic to ensure Python compatibility.

#importing pandas dataframe
import pandas as pd

import warnings
warnings.filterwarnings('ignore')

#importing seaborn
import seaborn as sns

#importing pandas profiling 
import pandas_profiling as pf

#importing matplolib
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline 

#importing reg-ex
import re

#Hold out method for splitting data
from sklearn.model_selection import train_test_split

#importing accuracy_score 
from sklearn.metrics import accuracy_score 

#importing LGBMClassifier 
from lightgbm import LGBMClassifier

#importing xgboost
import xgboost

rating = ['UserID','MovieID','Rating','Timestamp']
user = ['UserID','Gender','Age','Occupation','Zip-code']
movie = ['MovieID','Title','Genres']

rating_df = pd.read_csv('/content/Movie/ratings.dat',header=None,delimiter='::',names=rating)
print(rating_df.head())

print(rating_df.shape)

user_df = pd.read_csv('/content/Movie/users.dat',header=None,delimiter='::',names=user)
print(user_df.head())

print(user_df.shape)

movie_df = pd.read_csv('/content/Movie/movies.dat',header=None,delimiter='::',names=movie)
print(movie_df.head())
print()
print(movie_df.shape)

"""**Mearging 3 Datasets**"""

df = rating_df.merge(user_df,how='outer',on='UserID')
df = df.merge(movie_df,how='outer',on='MovieID')
df.head()

df.info()

df.shape

corr = df.corr()
sns.heatmap(corr,annot= True,linewidths=0.5)

"""**Extracting the pandas profiling report**"""

pf.describe(df)
pfr = pf.ProfileReport(df)
pfr.to_file('Movielens_pfr.html')

print('Na values in the data frame is :')
def is_na(x):
    for i in x.columns:
        print(i,'column',' :',x[i].isna().sum(),'\n')
is_na(df)

df.dropna(inplace=True)

df.Rating.isna().value_counts()

def df_unique(X):
    for i in X.columns:
        print('Column : ',i,'\n',X[i].unique(), '\n Total unique values is: ', X[i].nunique())
        print('----------------------------------------------------------------------')
df_unique(df)

"""**Exploring the datasets using visual representations**"""

df.Age.hist(grid=False)

"""**Visualizing User rating of the movie “Toy Story”**"""

def fn(x):
    return re.search("Toy Story".lower(), x.lower())!=None
title = df.iloc[0].Title
title

re_tit = df["Title"].apply(fn)
re_tit.head()

toystory = df[df["Title"].apply(fn)]
toystory

toystory.Rating.hist(grid=False)

"""**Top 25 movies by viewership rating**"""

top_25 = df.groupby(["MovieID", "Title"]).Timestamp.count().sort_values(ascending=False)

print('Top 25 movies by viewership rating')
print(top_25[:25])

"""**The ratings for all the movies reviewed by for a particular user of user id = 2696**"""

usr_2696 = df.loc[df.UserID==2696, "Rating"].sort_values(ascending=False)
usr_2696.head(),usr_2696.shape

usr_2696.hist()

"""**Finding all the unique genres**"""

df.Genres.unique()

Genres_list = df.Genres.tolist()
genre_list = []
i = 0
while(i<len(Genres_list)):
    genre_list+= Genres_list[i].split('|')
    i+=1

unique_gen = list(set(genre_list))
print(unique_gen)
print()
print("Length of the unique Genre : ",len(unique_gen))

"""**Creating a separate column for each genre category with a one-hot encoding ( 1 and 0)**"""

new_data = pd.concat([df,df.Genres.str.get_dummies()], axis=1)
print(new_data.columns)

new_data.head()

df_new = new_data.drop(['Title','Zip-code','Timestamp','Genres'],axis=1)
df_new.head()

print(df_new.columns)

"""**Encoding the gender column**


"""

df_new.Gender = pd.get_dummies(df_new.Gender)

x = df_new.drop(['UserID','MovieID','Rating'],axis=1)
x.shape

"""**The features affecting the ratings of any particular movie.**"""

print('The features affecting the ratings of any particular movie:')
print()
print(x.columns)

y = df_new.Rating
y.shape

x.Occupation.value_counts()

x = x.join(pd.get_dummies(x.Occupation,prefix='Occupation'))
x.head(),x.columns

x = x.drop(['Occupation','Occupation_0.0'],axis=1)
x.head(3),x.shape